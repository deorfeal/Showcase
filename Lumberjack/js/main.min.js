// JavaScript код
$(document).ready(function () {
    // При клике на кнопку
    $("#loadButton").click(function () {
        // Показываем индикатор загрузки
        $("#content").LoadingOverlay("show", {
            image: "",
            fontawesome: "fa fa-circle-o-notch fa-spin"
        });

        // Выполняем AJAX запрос
        $.ajax({
            url: "example.php",
            success: function (result) {
                // Успешно завершаем запрос
                // Ваш код для обработки результата
            },
            complete: function () {
                // Скрываем индикатор загрузки после завершения запроса
                $("#content").LoadingOverlay("hide");
            }
        });
    });
});

$(function () {
    $('.tubs-button').on('click', function (event) {
        $('.tubs-button--active').removeClass('tubs-button--active');
        $(this).addClass('tubs-button--active');
        if ($(this)[0].id == 0) {
            $('.maps').addClass('maps--active');
            $('.map').removeClass('map--active');
            $('.code-entrance').addClass('code-entrance--active');
            $('.password-entrance').removeClass('password-entrance--active');
        } else if ($(this)[0].id == 1) {
            $('.maps').removeClass('maps--active');
            $('.map').addClass('map--active');
            $('.code-entrance').removeClass('code-entrance--active');
            $('.password-entrance').addClass('password-entrance--active');
            if (document.querySelector('.branches--map')) { } else {
                if (document.querySelector('#map')) {
                    // Create a map object
                    var map = L.map('map').setView([50.47136055036438, 28.865240553484128], 5); // Set the initial map center and zoom level

                    // Create and add the tile layer for the map
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
                        maxZoom: 18
                    }).addTo(map);

                    // Add markers for your targets (needles)
                    var markers = [{
                        position: [50.47136055036438, 28.865240553484128],
                        title: 'С. Головіно'
                    },
                    {
                        position: [50.43692544103612, 30.48938553985964],
                        title: 'Вул. Липківського 14'
                    },
                    {
                        position: [48.74345, 21.89609],
                        title: 'Priemyselna 1711/2 Michalovce 07101 SLOVAKIA'
                    },
                        // Add more targets as needed
                    ];

                    // Add markers to the map with unique IDs
                    markers.forEach(function (marker, index) {
                        var markerObject = L.marker(marker.position, {
                            id: index
                        }).addTo(map).bindPopup(marker.title);

                        // Add click event for each marker
                        markerObject.on('click', function () {
                            map.panTo(marker.position);
                            $('.place--active').removeClass('place--active')
                            for (let item of $('.place')) {
                                if (item.id == index) {
                                    item.classList.add('place--active')
                                }
                            }

                            $('.map-info-time').removeClass('map-info-time--active')
                            for (let item of $('.map-info-time')) {
                                if (item.id == index) {
                                    item.classList.add('map-info-time--active')
                                }
                            }

                            // alert('Вы кликнули на маркер с ID: ' + index);
                            // Дополнительные действия при клике на маркер
                        });
                    });
                }
            }
            $('.branches').addClass('branches--map')
        }
    });

    $('.times-tubs__button-radio').on('click', function (event) {
        for (let item of $('.times-tubs__button-radio')) {
            item.checked = false
        }
        $(this)[0].checked = true
        $('.times-tubs__button--active').removeClass('times-tubs__button--active')
        $(this).closest('.times-tubs__button').addClass('times-tubs__button--active')


        $('.times__inner--active').removeClass('times__inner--active')
        for (let item of $('.times__inner')) {
            if ($(this).closest('.times-tubs__button')[0].id == item.id) {
                $(item).addClass('times__inner--active')
            }
        }
    });

    if (document.querySelector('.star-rating')) {
        const stars = document.querySelectorAll('.star-rating input[type="radio"]');

        function handleStarHover(event) {
            const hoveredStarIndex = Array.from(stars).indexOf(event.target);

            stars.forEach((star, index) => {
                if (index <= hoveredStarIndex) {
                    star.checked = true;
                } else {
                    star.checked = false;
                }
            });
        }

        stars.forEach((star) => {
            star.addEventListener('mouseover', handleStarHover);
        });
    }

    $('.confirmation-form__button--cancel').on('click', function (event) {
        $('.popup').addClass('popup--active');
    });

    $('.popup__close').on('click', function (event) {
        $('.popup').removeClass('popup--active');
    });

    $('.popup__link ').on('click', function (event) {
        $('.popup').removeClass('popup--active');
    });

    $('.confirmation__close').on('click', function (event) {
        $('.confirmation').addClass('confirmation--disabled');
    });

    $('.reserve-services-list__close').on('click', function (event) {
        $(this).closest('.reserve-services-list__item').addClass('reserve-services-list__item--disabled');
    });

    if (document.querySelector('#info-map')) {
        // Create a map object

        // Add markers for your targets (needles)
        var markers = [{
            position: [50.47136055036438, 28.865240553484128],
            title: 'С. Головіно'
        },
            // Add more targets as needed
        ];

        var map = L.map('info-map').setView(markers[0].position, 5); // Set the initial map center and zoom level


        // Create and add the tile layer for the map
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
            maxZoom: 18
        }).addTo(map);


        // Add markers to the map
        markers.forEach(function (marker) {
            L.marker(marker.position).addTo(map).bindPopup(marker.title);
        });
    }

    $('.entrance-form__button').on('click', function (event) {
        if ($(this).closest(".code-entrance")) {
            $('.entrance').addClass('entrance--code')
        }
    });

    $('.faq-list__item').on('click', function (event) {
        $('.faq-list__item--active').removeClass('faq-list__item--active')
        $(this).addClass('faq-list__item--active')
    });

    $('.experts-form__item-radio').on('click', function (event) {
        $('.experts__button').addClass('experts__button--active')
        for (let item of $('.experts-form__item-radio')) {
            item.checked = false
        }
        $(this)[0].checked = true
        $('.experts-form__item--active').removeClass('experts-form__item--active')
        $(this).closest('.experts-form__item').addClass('experts-form__item--active')
        $('.experts-item--active').removeClass('experts-item--active')
        $(this).closest('.experts-item').addClass('experts-item--active')
        $('.free-expert--active').removeClass('free-expert--active')
    });

    $('.times-item__radio').on('click', function (event) {
        for (let item of $('.times-item__radio')) {
            item.checked = false
        }
        $(this)[0].checked = true
        $('.times-item--active').removeClass('times-item--active')
        $(this).closest('.times-item').addClass('times-item--active')
    });

    $('.free-expert').on('click', function (event) {
        for (let item of $('.experts-form__item-radio')) {
            item.checked = false
        }
        $('.experts-item--active').removeClass('experts-item--active')
        $('.experts-form__item--active').removeClass('experts-form__item--active')
        $(this).addClass('free-expert--active')
    });

    $('.services-item__add-checkbox').on('click', function (event) {
        $(this).closest('.services-item__add').toggleClass('services-item__add--active')
        $('.services-info').addClass('services-info--active')
        $('body').addClass('body--services')
    });

    // ++++

    // $('.offers-item__add-checkbox').on('click', function (event) {
    //     $(this).closest('.offers-item__add').toggleClass('offers-item__add--active')
    //     $('.services-info').addClass('services-info--active')
    //     $('body').addClass('body--services')
    // });

    $('.offers-item__add-checkbox').on('click', function (event) {
        $(this).closest('.offers-item').find('.offers-item__add').toggleClass('offers-item__add--active');
        $(this).closest('.offers-item').find('.services-info').addClass('services-info--active');
        $('body').addClass('body--services');
    });

    $('.additional-item__add-checkbox').on('click', function (event) {
        $(this).closest('.additional-item__add').toggleClass('additional-item__add--active')
        $('body').addClass('body--services')
    });

    // ++++

    $('.location').on('click', function (event) {
        $('.location').toggleClass('location--active')
    });

    // // === 

    new Swiper('.calendar-view-swiper', {
        slidesPerView: 7.5,
        speed: 750,
        slidesPerGroup: 7,
        spaceBetween: 4,
        navigation: {
            prevEl: '.calendar-view-top__box-button--prev',
            nextEl: '.calendar-view-top__box-button--next',
        },
        breakpoints: {
            301: {
                slidesPerView: 5.5,
                speed: 750,
                slidesPerGroup: 5,
                spaceBetween: 4,
            },
            601: {
                slidesPerView: 7.5,
                speed: 750,
                slidesPerGroup: 7,
                spaceBetween: 4,
            },
        }

    });

    if (document.getElementById('datepicker')) {
        // Функция для запуска кода, когда класс "active" появляется или исчезает
        function observeDatePickerChanges() {
            // Создаем новый экземпляр MutationObserver
            const observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    if (mutation.attributeName === "class") {
                        // Перезапускаем код при изменении класса
                        restartCode();
                    }
                });
            });

            // Настройка наблюдения за элементом #datepicker
            const targetNode = document.getElementById('datepicker');
            observer.observe(targetNode, {
                attributes: true
            });
        }

        // Функция для перезапуска кода
        function restartCode() {
            // Ваш код, который нужно перезапустить
            if ($('#datepicker')[0].classList.contains('active')) {
                $('#datepicker').closest('.calendar-view-top__dates').addClass('calendar-view-top__dates--active')
            } else {
                $('#datepicker').closest('.calendar-view-top__dates').removeClass('calendar-view-top__dates--active')
            }
        }

        // Вызываем функцию для отслеживания изменений
        observeDatePickerChanges();

        $('.calendar-view-slide__radio').on('click', function (event) {
            $('.calendar-view-slide').removeClass('calendar-view-slide--active')
            $(this).closest('.calendar-view-slide').addClass('calendar-view-slide--active')
        });

        // Используем Flatpickr для преобразования input в виджет выбора даты и времени
        flatpickr('#datepicker', {
            dateFormat: "Y-m-d", // Встановлюємо формат дати
            locale: "uk", // Встановлюємо локалізацію на українську
            enableTime: false // Вимикаємо вибір часу
        });

        $('.calendar-view-top__wrp').on('click', function (event) {
            $(this).addClass('calendar-view-top__wrp--active');
        });
    }

    // // === 

    // // Получаем элементы формы
    // if (document.querySelector('.main__review-form')) {
    //     const form = document.querySelector('.main__review-form');
    //     const nameInput = document.querySelector('.review-form__input');
    //     const reviewTextarea = document.querySelector('.review-form__textarea');

    //     // Добавляем обработчики событий для ввода данных
    //     nameInput.addEventListener('input', toggleFormState);
    //     reviewTextarea.addEventListener('input', toggleFormState);

    //     // Функция для изменения состояния формы
    //     function toggleFormState() {
    //         const isActive = nameInput.value.trim() !== '' && reviewTextarea.value.trim() !== '';

    //         // Добавляем или удаляем класс в зависимости от состояния
    //         form.classList.toggle('review-form--active', isActive);
    //     }
    // }
    // //

    // // Функция для получения массива дат до конца текущего года
    // function getDatesUntilEndOfYear() {
    //     const currentDate = new Date();
    //     const daysOfWeek = ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"];
    //     const monthNames = [
    //         "Январь",
    //         "Февраль",
    //         "Март",
    //         "Апрель",
    //         "Май",
    //         "Июнь",
    //         "Июль",
    //         "Август",
    //         "Сентябрь",
    //         "Октябрь",
    //         "Ноябрь",
    //         "Декабрь",
    //     ];

    //     let dates = [];

    //     while (currentDate.getFullYear() === new Date().getFullYear()) {
    //         const year = currentDate.getFullYear();
    //         const month = currentDate.getMonth();
    //         const daysInMonth = new Date(year, month + 1, 0).getDate();

    //         for (let day = currentDate.getDate(); day <= daysInMonth; day++) {
    //             const currentDay = new Date(year, month, day);
    //             const dayOfWeek = daysOfWeek[currentDay.getDay()];

    //             dates.push({
    //                 day: day,
    //                 month: monthNames[month],
    //                 dayOfWeek: dayOfWeek,
    //             });
    //         }

    //         // Переходим к следующему месяцу
    //         currentDate.setMonth(month + 1);
    //         currentDate.setDate(1);
    //     }

    //     return dates;
    // }

    // // Пример использования
    // const datesArray = getDatesUntilEndOfYear();
    // datesArray.forEach(date => {
    //     // console.log(`${date.day} ${date.month} (${date.dayOfWeek})`);
    // });

    // let idOfSwipe = 0

    // datesArray.forEach(date => {
    //     idOfSwipe++
    //     console.log(`${date.month}`);
    // });

    // // Функция для создания и добавления слайдера
    // function createSlider(monthId, daysInMonth) {
    //     const calendarView = document.querySelector('.calendar-view');

    //     // Создаем элементы слайдера
    //     const slider = document.createElement('div');
    //     slider.classList.add('calendar-view__swiper', 'calendar-swiper', 'swiper');
    //     slider.dataset.id = monthId; // Используем dataset для хранения идентификатора

    //     const wrapper = document.createElement('div');
    //     wrapper.classList.add('swiper-wrapper');

    //     // Индексы для начала и конца отображаемых дней
    //     const startIndex = monthId * daysInMonth;
    //     const endIndex = (monthId + 1) * daysInMonth;

    //     for (let i = startIndex; i < endIndex && i < datesArray.length; i++) {
    //         const slide = document.createElement('div');
    //         slide.classList.add('calendar-swiper__slide', 'calendar-slide', 'swiper-slide');
    //         slide.innerText = `${datesArray[i].day.toString().slice(0, 3)} ${datesArray[i].month}`;
    //         wrapper.appendChild(slide);
    //     }

    //     const prevArrow = createArrow('prev', monthId);
    //     const nextArrow = createArrow('next', monthId);

    //     slider.appendChild(wrapper);
    //     slider.appendChild(prevArrow);
    //     slider.appendChild(nextArrow);

    //     // Добавляем слайдер внутрь элемента с классом calendar-view
    //     calendarView.appendChild(slider);

    //     // Инициализируем Swiper для каждого слайдера
    //     new Swiper(`.calendar-view__swiper[data-id="${monthId}"]`, {
    //         slidesPerView: 7.5,
    //         navigation: {
    //             nextEl: `.calendar-swiper__arrow-next[data-id="${monthId}"]`,
    //             prevEl: `.calendar-swiper__arrow-prev[data-id="${monthId}"]`,
    //         },
    //     });
    // }

    // // Функция для создания стрелки слайдера
    // function createArrow(direction, monthId) {
    //     const arrow = document.createElement('div');
    //     arrow.classList.add(`calendar-swiper__arrow-${direction}`);
    //     arrow.dataset.id = monthId; // Используем dataset для хранения идентификатора

    //     const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    //     svg.setAttribute('width', '7');
    //     svg.setAttribute('height', '12');
    //     svg.setAttribute('viewBox', '0 0 7 12');
    //     svg.setAttribute('fill', 'none');

    //     const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    //     path.setAttribute('d', (direction === 'prev') ?
    //         'M5.72909 1.12929L5.7998 1.05858L5.87052 1.12929L6.50691 1.76568L6.57762 1.83639L6.50691 1.9071L2.12285 6.29116L6.50691 10.6752L6.57762 10.7459L6.50691 10.8166L5.87051 11.453L5.7998 11.5238L5.72909 11.453L1.34503 7.06898L1.27432 6.99827L0.637925 6.36188L0.567214 6.29117L0.637925 6.22045L1.27432 5.58406L1.34503 5.51335L5.72909 1.12929Z' :
    //         'M1.27091 1.12929L1.2002 1.05858L1.12948 1.12929L0.493089 1.76568L0.422378 1.83639L0.493089 1.9071L4.87715 6.29116L0.493089 10.6752L0.422379 10.7459L0.493089 10.8166L1.12949 11.453L1.2002 11.5238L1.27091 11.453L5.65497 7.06898L5.72568 6.99827L6.36207 6.36188L6.43279 6.29117L6.36208 6.22045L5.72568 5.58406L5.65497 5.51335L1.27091 1.12929Z'
    //     );
    //     path.setAttribute('fill', '#241C12');
    //     path.setAttribute('stroke', '#241C12');
    //     path.setAttribute('stroke-width', '0.2');

    //     svg.appendChild(path);
    //     arrow.appendChild(svg);

    //     arrow.addEventListener('click', function () {
    //         const swiper = new Swiper(`.calendar-view__swiper[data-id="${monthId}"]`, {
    //             navigation: {
    //                 nextEl: `.calendar-swiper__arrow-next[data-id="${monthId}"]`,
    //                 prevEl: `.calendar-swiper__arrow-prev[data-id="${monthId}"]`,
    //             },
    //         });

    //         if (direction === 'prev') {
    //             swiper.slidePrev();
    //         } else {
    //             swiper.slideNext();
    //         }
    //     });

    //     return arrow;
    // }

    // // Пример использования
    // const currentDate = new Date();
    // const currentYear = currentDate.getFullYear();
    // let monthId = 0;

    // for (let month = currentDate.getMonth(); month <= 11; month++) {
    //     const daysInMonth = new Date(currentYear, month + 1, 0).getDate();
    //     const remainingDays = (month === currentDate.getMonth()) ? (daysInMonth - currentDate.getDate() + 1) : daysInMonth;
    //     createSlider(monthId, remainingDays);
    //     monthId++;
    // }

    // $('.calendar-swiper').each(function () {
    //     if ($(this).data('id') === 0) {
    //         $(this).addClass('calendar-swiper--active');
    //     }
    // });
})

// code from sms
function focusNext(currentInput) {
    const maxLength = parseInt(currentInput.getAttribute('maxlength'));
    const currentInputId = currentInput.id;

    if (currentInput.value.length === maxLength) {
        const nextInputId = currentInputId.substring(0, currentInputId.length - 1) + (parseInt(currentInputId[currentInputId.length - 1]) + 1);
        document.getElementById(nextInputId).focus();
    }
}
//

var x, i, j, l, ll, selElmnt, a, b, c;
/* Look for any elements with the class "custom-select": */
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
    selElmnt = x[i].getElementsByTagName("select")[0];
    ll = selElmnt.length;
    /* For each element, create a new DIV that will act as the selected item: */
    a = document.createElement("DIV");
    a.setAttribute("class", "select-selected");
    a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
    x[i].appendChild(a);
    /* For each element, create a new DIV that will contain the option list: */
    b = document.createElement("DIV");
    b.setAttribute("class", "select-items select-hide");
    for (j = 1; j < ll; j++) {
        /* For each option in the original select element,
        create a new DIV that will act as an option item: */
        c = document.createElement("DIV");
        c.innerHTML = selElmnt.options[j].innerHTML;
        c.addEventListener("click", function (e) {
            /* When an item is clicked, update the original select box,
            and the selected item: */
            var y, i, k, s, h, sl, yl;
            s = this.parentNode.parentNode.getElementsByTagName("select")[0];
            sl = s.length;
            h = this.parentNode.previousSibling;
            for (i = 0; i < sl; i++) {
                if (s.options[i].innerHTML == this.innerHTML) {
                    s.selectedIndex = i;
                    h.innerHTML = this.innerHTML;
                    y = this.parentNode.getElementsByClassName("same-as-selected");
                    yl = y.length;
                    for (k = 0; k < yl; k++) {
                        y[k].removeAttribute("class");
                    }
                    this.setAttribute("class", "same-as-selected");
                    break;
                }
            }
            h.click();
        });
        b.appendChild(c);
    }
    x[i].appendChild(b);
    a.addEventListener("click", function (e) {
        /* When the select box is clicked, close any other select boxes,
        and open/close the current select box: */
        e.stopPropagation();
        closeAllSelect(this);
        this.nextSibling.classList.toggle("select-hide");
        this.classList.toggle("select-arrow-active");
    });
}

function closeAllSelect(elmnt) {
    /* A function that will close all select boxes in the document,
    except the current select box: */
    var x, y, i, xl, yl, arrNo = [];
    x = document.getElementsByClassName("select-items");
    y = document.getElementsByClassName("select-selected");
    xl = x.length;
    yl = y.length;
    for (i = 0; i < yl; i++) {
        if (elmnt == y[i]) {
            arrNo.push(i)
        } else {
            y[i].classList.remove("select-arrow-active");
        }
    }
    for (i = 0; i < xl; i++) {
        if (arrNo.indexOf(i)) {
            x[i].classList.add("select-hide");
        }
    }
}

/* If the user clicks anywhere outside the select box,
then close all select boxes: */
document.addEventListener("click", closeAllSelect);

// $(function () {
//     var mixer = mixitup('.draws-info__inner', {
//         load: {
//             filter: '.draw'
//         },
//         animation: {
//             enable: false
//         },
//     });
// })

// $(function () {
//     var containerEl1 = document.querySelector('[data-ref="container-1"]');
//     var containerEl2 = document.querySelector('[data-ref="container-2"]');

//     var config = {
//         controls: {
//             scope: 'local'
//         },
//         load: {
//             filter: '.item-first',
//         },
//         animation: {
//             effects: 'fade scale(0%)',
//             duration: 0,
//         },
//     };
//     var confiG = {
//         controls: {
//             scope: 'local'
//         },
//         load: {
//             filter: '.item-firstt',
//         },
//         animation: {
//             effects: 'fade scale(0%)',
//             duration: 0,
//         },
//     };

//     var confiGG = {
//         controls: {
//             scope: 'local'
//         },
//         load: {
//             filter: '.item-first',
//         }
//     };

//     var mixer1 = mixitup(containerEl1, config);
//     var mixer1 = mixitup(containerEl2, confiG);

// })

// Aos - the right initialisation
// jQuery(document).ready(function () {
//     (function () {
//         // your page initialization code here
//         // the DOM will be available here
//         AOS.init({
//             duration: 1000,
//             offset: 0, // offset (in px) from the original trigger point
//             anchorPlacement: 'top-bottom', // define where the AOS animations will be triggered
//         });
//     })();
// });
// //

// timer
// setInterval(() => {
//     let timeNow = new Date() // Время сейчас
//     let timeNowTimeStamp = timeNow.getTime() // сколько прошоло с 1970 до теперешнего момената
//     // console.log(timeNowTimeStamp)

//     let ourDate = new Date('2023-03-19T23:14:00') // Время нашего знакомства
//     let ourDateTimeStamp = ourDate.getTime() // сколько прошоло с 1970 до теперешнего момената
//     // console.log(ourDateTimeStamp)

//     let timeStampMilliseconds = ourDateTimeStamp - timeNowTimeStamp // Миллисекунды ( разница между временем теперь и временем нашей встречи )

//     let secondsOfTimeStamp = timeStampMilliseconds / 1000 // Секунды - разницы
//     let minutesOfTimeStamp = secondsOfTimeStamp / 60 // минуты - разницы
//     let hoursOfTimeStamp = minutesOfTimeStamp / 60 // часы - разницы
//     let daysOfTimeStamp = hoursOfTimeStamp / 24 // Дни - разницы

//     let secondsOfTimeStampFloor = Math.floor(timeStampMilliseconds / 1000) // Секунды - разницы
//     let minutesOfTimeStampFloor = Math.floor(secondsOfTimeStamp / 60) // минуты - разницы
//     let secondsRamnant = secondsOfTimeStampFloor - (minutesOfTimeStampFloor * 60) // Остаток секунд - то есть наши секунды в Html
//     let hoursOfTimeStampFloor = Math.floor(minutesOfTimeStamp / 60) // часы - разницы
//     let minutesRamnant = minutesOfTimeStampFloor - (hoursOfTimeStampFloor * 60) // Остаток минут - то есть наши минуты в Html
//     let daysOfTimeStampFloor = Math.floor(hoursOfTimeStamp / 24) // Дни - разницы
//     let hoursRamnant = hoursOfTimeStampFloor - (daysOfTimeStampFloor * 24) // Остаток часов - то есть наши часы в Html

//     let hours = document.querySelector('.header-bottom-body-row__item-text--hours')

//     let minutes = document.querySelector('.header-bottom-body-row__item-text--minutes')

//     let seconds = document.querySelector('.header-bottom-body-row__item-text--seconds')

//     // // //

//     seconds.innerHTML = secondsRamnant

//     if (hoursRamnant < 10) {
//         console.log(String(hoursRamnant)[0])
//         hours.innerHTML = '0' + String(hoursRamnant) + '<span>:</span>'
//     } else {
//         hours.innerHTML = String(hoursRamnant) + '<span>:</span>'
//     }

//     if (minutesRamnant < 10) {
//         minutes.innerHTML = '0' + String(minutesRamnant) + '<span>:</span>'
//     } else {
//         minutes.innerHTML = String(minutesRamnant) + '<span>:</span>'
//     }

//     if (secondsRamnant < 10) {
//         seconds.innerHTML = '0' + String(secondsRamnant)
//     } else {
//         seconds.innerHTML = String(secondsRamnant)
//     }
// }, 1000)
// //

// typed js

// $(".typed").typed({
//     strings: ["Графічним дизайнерам", "Початковим веб-дизайнерам", "Студентам/школярам", "Офісним працівникам"],
//     // Optionally use an HTML element to grab strings from (must wrap each string in a <p>)
//     stringsElement: null,
//     // typing speed
//     typeSpeed: 30,
//     // time before typing starts
//     startDelay: 1200,
//     // backspacing speed
//     backSpeed: 20,
//     // time before backspacing
//     backDelay: 500,
//     // loop
//     loop: true,
//     // false = infinite
//     loopCount: 5,
//     // show cursor
//     showCursor: false,
//     // character for cursor
//     cursorChar: "|",
//     // attribute to type (null == text)
//     attr: null,
//     // either html or text
//     contentType: 'html',
//     // call when done callback function
//     callback: function () {},
//     // starting callback function before each string
//     preStringTyped: function () {},
//     //callback for every typed string
//     onStringTyped: function () {},
//     // callback for reset
//     resetCallback: function () {}
// });
// //

// Phone mask

// window.addEventListener("DOMContentLoaded", function () {
//     [].forEach.call(document.querySelectorAll('.tel'), function (input) {
//         var keyCode;

//         function mask(event) {
//             event.keyCode && (keyCode = event.keyCode);
//             var pos = this.selectionStart;
//             if (pos < 3) event.preventDefault();
//             var matrix = "+7 (___) ___-____",
//                 i = 0,
//                 def = matrix.replace(/\D/g, ""),
//                 val = this.value.replace(/\D/g, ""),
//                 new_value = matrix.replace(/[_\d]/g, function (a) {
//                     return i < val.length ? val.charAt(i++) || def.charAt(i) : a
//                 });
//             i = new_value.indexOf("_");
//             if (i != -1) {
//                 i < 5 && (i = 3);
//                 new_value = new_value.slice(0, i)
//             }
//             var reg = matrix.substr(0, this.value.length).replace(/_+/g,
//                 function (a) {
//                     return "\\d{1," + a.length + "}"
//                 }).replace(/[+()]/g, "\\$&");
//             reg = new RegExp("^" + reg + "$");
//             if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;
//             if (event.type == "blur" && this.value.length < 5) this.value = ""
//         }

//         input.addEventListener("input", mask, false);
//         input.addEventListener("focus", mask, false);
//         input.addEventListener("blur", mask, false);
//         input.addEventListener("keydown", mask, false)

//     });

// });

// //

// Visibilyto of element on scroll or not
// $(function () {
//     // Получаем нужный элемент
//     var element = document.querySelector('footer');

//     var Visible = function (target) {
//         // let headerBottom = document.querySelectorAll('.header-bottom')[0]
//         // var menuBtn = document.querySelectorAll('.menu-btn')[0]
//         // var footerTop = document.querySelectorAll('.footer-top')[0]
//         // Все позиции элемента
//         var targetPosition = {
//                 top: window.pageYOffset + target.getBoundingClientRect().top,
//                 left: window.pageXOffset + target.getBoundingClientRect().left,
//                 right: window.pageXOffset + target.getBoundingClientRect().right,
//                 bottom: window.pageYOffset + target.getBoundingClientRect().bottom
//             },
//             // Получаем позиции окна
//             windowPosition = {
//                 top: window.pageYOffset,
//                 left: window.pageXOffset,
//                 right: window.pageXOffset + document.documentElement.clientWidth,
//                 bottom: window.pageYOffset + document.documentElement.clientHeight
//             };

//         if (targetPosition.bottom > windowPosition.top && // Если позиция нижней части элемента больше позиции верхней чайти окна, то элемент виден сверху
//             targetPosition.top < windowPosition.bottom && // Если позиция верхней части элемента меньше позиции нижней чайти окна, то элемент виден снизу
//             targetPosition.right > windowPosition.left && // Если позиция правой стороны элемента больше позиции левой части окна, то элемент виден слева
//             targetPosition.left < windowPosition.right) { // Если позиция левой стороны элемента меньше позиции правой чайти окна, то элемент виден справа
//             // Если элемент полностью видно, то запускаем следующий код
//             $('.connection__bottom-btn').addClass('connection__bottom-btn--none')
//             $('.connection').addClass('connection-margin')

//         } else {
//             $('.connection__bottom-btn').removeClass('connection__bottom-btn--none')
//             $('.connection').removeClass('connection-margin')
//         };
//     };

//     // Запускаем функцию при прокрутке страницы
//     window.addEventListener('scroll', function () {
//         Visible(element);
//     });

//     // А также запустим функцию сразу. А то вдруг, элемент изначально видно
//     Visible(element);
// })
// // 